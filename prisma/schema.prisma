// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Donator {
  id           Int       @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String    @unique
  password     String
  salt         String
  refreshToken String?
  balance      Float     @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  scope             DonatorScope[]
  donationBox       DonationBox[]
  powerSupplies     PowerSupply[]
  favouriteNgos     NGO[]
  favouriteProjects Project[]
  transaction       Donation[]
}

model DonatorScope {
  id   Int              @id @default(autoincrement())
  name DonatorScopeEnum @unique

  donators      Donator[]
  DonatorClient DonatorClient[]
}

enum DonatorScopeEnum {
  READ_DONATION     @map("read:donation")
  WRITE_DONATION    @map("write:donation")
  READ_DONATIONBOX  @map("read:donationbox")
  WRITE_DONATIONBOX @map("write:donationbox")
  READ_DONATOR      @map("read:donator")
  WRITE_DONATOR     @map("write:donator")
  READ_NGO          @map("read:ngo")
  READ_PROJECT      @map("read:project")
  READ_TRANSACTION  @map("read:transaction")
}

enum Status {
  WORKING
  READY
  AVAILABLE
  UNAVAILABLE
  UNINITIALIZED
}

model DonationBox {
  id          Int      @id @default(autoincrement())
  cuid        String   @unique @default(cuid())
  name        String?
  last_status Status
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  donatorId     Int?
  powerSupplyId Int?
  donator       Donator?     @relation(fields: [donatorId], references: [id])
  powerSupply   PowerSupply? @relation(fields: [powerSupplyId], references: [id])
  earnings      Earning[]
}

model PowerSupply {
  id        Int      @id @default(autoincrement())
  name      String
  config    Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  configSchemaId Int
  configSchema   SupportedPowerSupply @relation(fields: [configSchemaId], references: [id])
  donatorId      Int
  donator        Donator              @relation(fields: [donatorId], references: [id])
  donationBoxes  DonationBox[]
}

model SupportedPowerSupply {
  id           Int      @id @default(autoincrement())
  configSchema Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  powerSupplies PowerSupply[]
}

model NGO {
  id           Int       @id @default(autoincrement())
  name         String
  email        String    @unique
  contact      String
  website_url  String
  description  String
  banner_uri   String?
  address      String
  password     String
  refreshToken String?
  salt         String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  projects             Project[]
  favouritedByDonators Donator[]
  donations            Donation[]
  scope                NGOScope[]
}

enum NGOScopeEnum {
  READ_NGO      @map("read:ngo")
  WRITE_NGO     @map("write:ngo")
  READ_PROJECT  @map("read:project")
  WRITE_PROJECT @map("write:project")
}

model NGOScope {
  id   Int          @id @default(autoincrement())
  name NGOScopeEnum @unique

  ngos        NGO[]
  NGOClient   NGOClient[]
  nGOClientId String?
}

enum Category {
  Education
  Health
  Environment
  Human_Rights
  Animal_Rights
  Social
  OTHER
}

model Project {
  id                  Int      @id @default(autoincrement())
  name                String
  description         String
  fundraising_goal    Float
  fundraising_current Float
  fundraising_closed  Boolean
  progress            Float
  archived            Boolean
  banner_uri          String?
  target_date         DateTime
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  category            Category

  ngoId                Int?
  ngo                  NGO?       @relation(fields: [ngoId], references: [id])
  FavouritedByDonators Donator[]
  donations            Donation[]
}

model Donation {
  id        Int      @id @default(autoincrement())
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  donatorId Int
  projectId Int?
  ngoId     Int
  donator   Donator  @relation(fields: [donatorId], references: [id])
  project   Project? @relation(fields: [projectId], references: [id])
  ngo       NGO      @relation(fields: [ngoId], references: [id])
}

model Earning {
  id                 Int      @id @default(autoincrement())
  amount             Float
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  activeTimeInPeriod Float

  donationBoxId Int
  donationBox   DonationBox @relation(fields: [donationBoxId], references: [id])
  payoutId      Int
  payout        Payout      @relation(fields: [payoutId], references: [id])
}

model Payout {
  id              Int      @id @default(autoincrement())
  amount          Float
  periodStart     DateTime
  periodEnd       DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  transactionHash String   @unique

  earnings Earning[]
}

model NGOClient {
  id                   String     @id @default(cuid())
  clientId             String     @unique
  clientSecret         String
  clientName           String
  clientSecretExpires  BigInt
  clientSecretLifetime BigInt
  accessTokenLifetime  BigInt
  refreshTokenLifetime BigInt
  allowedScopes        NGOScope[]
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
}

model DonatorClient {
  id                   String         @id @default(cuid())
  clientId             String         @unique
  clientSecret         String
  clientName           String
  clientSecretExpires  BigInt
  clientSecretLifetime BigInt
  accessTokenLifetime  BigInt
  refreshTokenLifetime BigInt
  allowedScopes        DonatorScope[]
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
}
